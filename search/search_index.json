{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ASTx Library: A Versatile Toolkit for Language Representation","text":"<p>ASTx is a groundbreaking library designed to encapsulate language components in an agnostic and pythonic way. It provides a comprehensive set of classes and functionalities, allowing developers to articulate the core elements of any programming language.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://arxlang.github.io/astx</li> </ul>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#1-expressive-language-components","title":"1. Expressive Language Components","text":"<p>ASTx offers a rich suite of classes to describe essential language constructs such as:</p> <ul> <li><code>If</code> statements</li> <li><code>For</code> loops</li> <li><code>Function</code> declarations and usages</li> <li>Variables</li> <li>Data Types</li> <li>Operations</li> <li>And more</li> </ul> <p>These classes enable a concise and clear representation, providing an intuitive way to model various programming constructs.</p>"},{"location":"#2-symbol-table-class","title":"2. Symbol Table Class","text":"<p>An integral part of ASTx, the Symbol Table class facilitates the translation of ASTx expressions to other languages like LLVM-IR. This class acts as a mapping layer, allowing a seamless connection between ASTx expressions and target language representations.</p>"},{"location":"#3-language-agnostic-design","title":"3. Language Agnostic Design","text":"<p>Uniquely tailored to be independent of specific programming languages, ASTx offers a flexible foundation. It strives to provide initial components that can describe any programming language, giving users the freedom to work with multiple languages effortlessly.</p>"},{"location":"#4-integration-with-projects-like-arx-ir","title":"4. Integration with Projects like ARX-IR","text":"<p>ASTx has proven to be a vital tool in projects like ARX-IR, where it's leveraged to translate Abstract Syntax Trees (AST) into LLVM-IR. This showcases the library's adaptability and potential to serve as a foundational layer in various applications.</p>"},{"location":"#why-choose-astx","title":"Why Choose ASTx?","text":"<p>ASTx is not just a library; it's a robust framework that fosters creativity and efficiency in language processing. Its pythonic design, combined with the power to handle different language constructs, positions ASTx as an invaluable resource for developers and researchers alike.</p> <p>Whether you're building a compiler, working on language translation, or exploring new frontiers in programming language design, ASTx offers a reliable and extensible toolkit to support your endeavors.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>You can explore the ASTx library and dive into its capabilities by accessing the official documentation. For those interested in contributing or seeking further insights, the ASTx community provides extensive support and collaboration opportunities.</p> <p>Unlock the potential of language representation with ASTx, and join us in shaping the future of programming languages.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#091-2024-03-23","title":"0.9.1 (2024-03-23)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>docs: Fix contributing guide and getting started tutorial (#53) (e51d83f)</li> </ul>"},{"location":"changelog/#090-2024-03-06","title":"0.9.0 (2024-03-06)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>create LiteralBoolean class (#51) (5b84b04)</li> <li>Improve DataTypeOp and add Tutorial about For Loops (#29) (195c57b)</li> <li>Improve Function classes and add a tutorial about that (#27) (f8608d5)</li> <li>Improve Variables classes (#26) (d981f88)</li> </ul>"},{"location":"changelog/#080-2024-01-08","title":"0.8.0 (2024-01-08)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add new data types for LiteralInt8, LiteralInt16, LiteralIn64 (#24) (40230ec)</li> </ul>"},{"location":"changelog/#071-2023-12-05","title":"0.7.1 (2023-12-05)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix typing issues (#19) (9cb53c4)</li> </ul>"},{"location":"changelog/#070-2023-12-05","title":"0.7.0 (2023-12-05)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add ref attribute to the Expr class (#18) (60b9b0e)</li> </ul>"},{"location":"changelog/#060-2023-09-07","title":"0.6.0 (2023-09-07)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Add options for the graph visualization objects shape (#16) (93f6ebd)</li> </ul>"},{"location":"changelog/#051-2023-09-07","title":"0.5.1 (2023-09-07)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Fix docs generation (#15) (e1bfb4e)</li> </ul>"},{"location":"changelog/#050-2023-09-06","title":"0.5.0 (2023-09-06)","text":""},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add initial support for jupyter display with graphviz (#14) (35a8c98)</li> </ul>"},{"location":"changelog/#040-2023-09-05","title":"0.4.0 (2023-09-05)","text":""},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Represent the ASTx in <code>yaml</code> and <code>json</code> formats (#13) (26d22af)</li> </ul>"},{"location":"changelog/#033-2023-08-30","title":"0.3.3 (2023-08-30)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>config: Fix configuration and improve documentation (#12) (fbb8898)</li> </ul>"},{"location":"changelog/#032-2023-08-22","title":"0.3.2 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>Fix logo in the documentation and fix configuration files style. (#11) (8552e08)</li> </ul>"},{"location":"changelog/#031-2023-08-22","title":"0.3.1 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>fix documentation release workflow (#10) (6cfb9a6)</li> </ul>"},{"location":"changelog/#030-2023-08-22","title":"0.3.0 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Fix the current linter configuration and the dependencies' pinning (#9) (d310511)</li> </ul>"},{"location":"changelog/#features_6","title":"Features","text":"<ul> <li>Add support for ForRangeLoop and ForCountLoop (#7) (bb77de1)</li> </ul>"},{"location":"changelog/#021-2023-08-07","title":"0.2.1 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Refactor Control flow classes and improve Documentation (#6) (4013398)</li> </ul>"},{"location":"changelog/#020-2023-08-07","title":"0.2.0 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_8","title":"Bug Fixes","text":"<ul> <li>Fix release configuration (#5) (13cd6e1)</li> </ul>"},{"location":"changelog/#features_7","title":"Features","text":"<ul> <li>Overload DataType operators (#4) (3b93128)</li> </ul>"},{"location":"contributing/","title":"Contributing Guideline","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/astx</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/arxlang/astx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ASTx could always use more documentation, whether as part of the official ASTx docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/arxlang/astx/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>astx</code> for local development.</p> <ol> <li>Fork the <code>astx</code> repo on GitHub.</li> <li>Clone your fork locally:</li> </ol> <pre><code>$ git clone git@github.com:your_name_here/astx.git\n$ cd astx/\n</code></pre> <ol> <li>Create a new virtual environment and install your local copy into that:</li> </ol> <pre><code># note: you can use mamba or conda or micromamba\n$ mamba env create --file conda/dev.yaml\n$ conda activate astx\n$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n# Now you can make your changes locally.\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass the linter and     the tests:</li> </ol> <pre><code>$ makim tests.linter\n$ makim tests.unittest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests, you can use something like:</p> <pre><code>$ pytest tests.test_arxast\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest --path \"tests/test_arxast\" --params \"-k mytest_func\"\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>NOTE: Breaking change's commit message prefix should have <code>!</code> before <code>:</code>. Also, ensure to specify <code>feat</code> or <code>fix</code> in the prefix.</p> <p>References:</p> <ul> <li>https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</li> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> </ul> <p>This project uses the <code>squash and merge</code> strategy, so ensure to apply the commit message format to the PR's title.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ASTx, run this command in your terminal:</p> <pre><code>$ pip install astx\n</code></pre> <p>This is the preferred method to install ASTx, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for ASTx can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/arxlang/astx\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/arxlang/astx/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/references/","title":"Api references","text":""},{"location":"api/references/#astx","title":"<code>astx</code>","text":"<p>ASTx.</p>"},{"location":"api/references/#astx-classes","title":"Classes","text":""},{"location":"api/references/#astx.AST","title":"<code>AST</code>","text":"<p>AST main expression class.</p>"},{"location":"api/references/#astx.AST-functions","title":"Functions","text":""},{"location":"api/references/#astx.AST.__init__","title":"<code>__init__(loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the AST instance.</p>"},{"location":"api/references/#astx.AST.__repr__","title":"<code>__repr__()</code>","text":"<p>Return an string that represents the object.</p>"},{"location":"api/references/#astx.AST.__str__","title":"<code>__str__()</code>","text":"<p>Return an string that represents the object.</p>"},{"location":"api/references/#astx.AST._repr_png_","title":"<code>_repr_png_()</code>","text":"<p>Return PNG representation of the Graphviz object.</p> <p>This method is specially recognized by Jupyter Notebook to display a Graphviz diagram inline.</p>"},{"location":"api/references/#astx.AST.get_struct","title":"<code>get_struct()</code>  <code>abstractmethod</code>","text":"<p>Return a simple structure that represents the object.</p>"},{"location":"api/references/#astx.AST.to_json","title":"<code>to_json()</code>","text":"<p>Return an json string that represents the object.</p>"},{"location":"api/references/#astx.AST.to_yaml","title":"<code>to_yaml()</code>","text":"<p>Return an yaml string that represents the object.</p>"},{"location":"api/references/#astx.ASTKind","title":"<code>ASTKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The expression kind class used for downcasting.</p>"},{"location":"api/references/#astx.Argument","title":"<code>Argument</code>","text":"<p>             Bases: <code>Variable</code></p> <p>AST class for argument definition.</p>"},{"location":"api/references/#astx.Argument-functions","title":"Functions","text":""},{"location":"api/references/#astx.Argument.__init__","title":"<code>__init__(name, type_, mutability=MutabilityKind.constant, default=UNDEFINED, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the VarExprAST instance.</p>"},{"location":"api/references/#astx.Argument.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.BinaryOp","title":"<code>BinaryOp</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>AST class for the binary operator.</p>"},{"location":"api/references/#astx.BinaryOp-functions","title":"Functions","text":""},{"location":"api/references/#astx.BinaryOp.__init__","title":"<code>__init__(op_code, lhs, rhs, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the BinaryOp instance.</p>"},{"location":"api/references/#astx.BinaryOp.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.BinaryOp.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure that represents the object.</p>"},{"location":"api/references/#astx.Block","title":"<code>Block</code>","text":"<p>             Bases: <code>AST</code></p> <p>The AST tree.</p>"},{"location":"api/references/#astx.Block-functions","title":"Functions","text":""},{"location":"api/references/#astx.Block.__init__","title":"<code>__init__(name='entry')</code>","text":"<p>Initialize the AST instance.</p>"},{"location":"api/references/#astx.Block.__iter__","title":"<code>__iter__()</code>","text":"<p>Overload <code>iter</code> magic function.</p>"},{"location":"api/references/#astx.Block.__next__","title":"<code>__next__()</code>","text":"<p>Overload <code>next</code> magic function.</p>"},{"location":"api/references/#astx.Block.append","title":"<code>append(value)</code>","text":"<p>Append a new node to the stack.</p>"},{"location":"api/references/#astx.Block.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Boolean","title":"<code>Boolean</code>","text":"<p>             Bases: <code>DataType</code></p> <p>Boolean data type expression.</p>"},{"location":"api/references/#astx.DataType","title":"<code>DataType</code>","text":"<p>             Bases: <code>Expr</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.DataType-functions","title":"Functions","text":""},{"location":"api/references/#astx.DataType.__repr__","title":"<code>__repr__()</code>","text":"<p>Return an string that represents the object.</p>"},{"location":"api/references/#astx.DataType.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a simple structure that represents the object.</p>"},{"location":"api/references/#astx.DataTypeOps","title":"<code>DataTypeOps</code>","text":"<p>             Bases: <code>DataType</code></p> <p>Overload some magic functions used for the main operations.</p>"},{"location":"api/references/#astx.DataTypeOps-functions","title":"Functions","text":""},{"location":"api/references/#astx.DataTypeOps.__add__","title":"<code>__add__(other)</code>","text":"<p>Overload the magic <code>add</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__div__","title":"<code>__div__(other)</code>","text":"<p>Overload the magic <code>div</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Overload the magic <code>eq</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__ge__","title":"<code>__ge__(other)</code>","text":"<p>Overload the magic <code>ge</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__gt__","title":"<code>__gt__(other)</code>","text":"<p>Overload the magic <code>gt</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__le__","title":"<code>__le__(other)</code>","text":"<p>Overload the magic <code>le</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__lt__","title":"<code>__lt__(other)</code>","text":"<p>Overload the magic <code>lt</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__mod__","title":"<code>__mod__(other)</code>","text":"<p>Overload the magic <code>mod</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Overload the magic <code>mul</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__ne__","title":"<code>__ne__(other)</code>","text":"<p>Overload the magic <code>ne</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__neg__","title":"<code>__neg__()</code>","text":"<p>Overload the magic <code>ne</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__pow__","title":"<code>__pow__(other)</code>","text":"<p>Overload the magic <code>pow</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Overload the magic <code>sub</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__truediv__","title":"<code>__truediv__(other)</code>","text":"<p>Overload the magic <code>truediv</code> method.</p>"},{"location":"api/references/#astx.Expr","title":"<code>Expr</code>","text":"<p>             Bases: <code>AST</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.Float16","title":"<code>Float16</code>","text":"<p>             Bases: <code>Floating</code></p> <p>Float16 data type expression.</p>"},{"location":"api/references/#astx.Float32","title":"<code>Float32</code>","text":"<p>             Bases: <code>Floating</code></p> <p>Float32 data type expression.</p>"},{"location":"api/references/#astx.Float64","title":"<code>Float64</code>","text":"<p>             Bases: <code>Floating</code></p> <p>Float64 data type expression.</p>"},{"location":"api/references/#astx.Floating","title":"<code>Floating</code>","text":"<p>             Bases: <code>Number</code></p> <p>AST for the literal float number.</p>"},{"location":"api/references/#astx.ForCountLoop","title":"<code>ForCountLoop</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for a simple Count-Controlled <code>For</code> Loop statement.</p> <p>This is a very basic <code>for</code> loop, used by languages like C or C++.</p>"},{"location":"api/references/#astx.ForCountLoop-functions","title":"Functions","text":""},{"location":"api/references/#astx.ForCountLoop.__init__","title":"<code>__init__(initializer, condition, update, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the ForStmt instance.</p>"},{"location":"api/references/#astx.ForCountLoop.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.ForCountLoop.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.ForRangeLoop","title":"<code>ForRangeLoop</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for <code>For</code> Loop Range statement.</p>"},{"location":"api/references/#astx.ForRangeLoop-functions","title":"Functions","text":""},{"location":"api/references/#astx.ForRangeLoop.__init__","title":"<code>__init__(variable, start, end, step, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the ForStmt instance.</p>"},{"location":"api/references/#astx.ForRangeLoop.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.ForRangeLoop.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Function","title":"<code>Function</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for function definition.</p>"},{"location":"api/references/#astx.Function-attributes","title":"Attributes","text":""},{"location":"api/references/#astx.Function.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return the function prototype name.</p>"},{"location":"api/references/#astx.Function-functions","title":"Functions","text":""},{"location":"api/references/#astx.Function.__call__","title":"<code>__call__(args, loc=SourceLocation(0, 0))</code>","text":"<p>Return a FunctionCall for this call operation.</p>"},{"location":"api/references/#astx.Function.__init__","title":"<code>__init__(prototype, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Function instance.</p>"},{"location":"api/references/#astx.Function.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represent the object.</p>"},{"location":"api/references/#astx.Function.get_struct","title":"<code>get_struct()</code>","text":"<p>Get the AST structure that represent the object.</p>"},{"location":"api/references/#astx.FunctionCall","title":"<code>FunctionCall</code>","text":"<p>             Bases: <code>Expr</code></p> <p>AST class for function call.</p>"},{"location":"api/references/#astx.FunctionCall-functions","title":"Functions","text":""},{"location":"api/references/#astx.FunctionCall.__init__","title":"<code>__init__(callee, args, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Call instance.</p>"},{"location":"api/references/#astx.FunctionCall.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p>"},{"location":"api/references/#astx.FunctionCall.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.FunctionPrototype","title":"<code>FunctionPrototype</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for function prototype declaration.</p>"},{"location":"api/references/#astx.FunctionPrototype-functions","title":"Functions","text":""},{"location":"api/references/#astx.FunctionPrototype.__init__","title":"<code>__init__(name, args, return_type, scope=ScopeKind.global_, visibility=VisibilityKind.public, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the FunctionPrototype instance.</p>"},{"location":"api/references/#astx.FunctionPrototype.get_struct","title":"<code>get_struct()</code>","text":"<p>Get the AST structure that represent the object.</p>"},{"location":"api/references/#astx.FunctionReturn","title":"<code>FunctionReturn</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for function <code>return</code> statement.</p>"},{"location":"api/references/#astx.FunctionReturn-functions","title":"Functions","text":""},{"location":"api/references/#astx.FunctionReturn.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Return instance.</p>"},{"location":"api/references/#astx.FunctionReturn.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p>"},{"location":"api/references/#astx.FunctionReturn.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.If","title":"<code>If</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for <code>if</code> statement.</p>"},{"location":"api/references/#astx.If-functions","title":"Functions","text":""},{"location":"api/references/#astx.If.__init__","title":"<code>__init__(condition, then, else_=None, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the If instance.</p>"},{"location":"api/references/#astx.If.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p>"},{"location":"api/references/#astx.If.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.InlineVariableDeclaration","title":"<code>InlineVariableDeclaration</code>","text":"<p>             Bases: <code>Expr</code></p> <p>AST class for inline variable declaration expression.</p> <p>Can be used in expressions like for loops.</p>"},{"location":"api/references/#astx.InlineVariableDeclaration-functions","title":"Functions","text":""},{"location":"api/references/#astx.InlineVariableDeclaration.__init__","title":"<code>__init__(name, type_, mutability=MutabilityKind.constant, visibility=VisibilityKind.public, scope=ScopeKind.local, value=UNDEFINED, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the VarExprAST instance.</p>"},{"location":"api/references/#astx.InlineVariableDeclaration.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.InlineVariableDeclaration.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.Int16","title":"<code>Int16</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int16 data type expression.</p>"},{"location":"api/references/#astx.Int32","title":"<code>Int32</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int32 data type expression.</p>"},{"location":"api/references/#astx.Int64","title":"<code>Int64</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int64 data type expression.</p>"},{"location":"api/references/#astx.Int8","title":"<code>Int8</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int8 data type expression.</p>"},{"location":"api/references/#astx.Integer","title":"<code>Integer</code>","text":"<p>             Bases: <code>Number</code></p> <p>Integer number data type expression.</p>"},{"location":"api/references/#astx.Literal","title":"<code>Literal</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>Literal Data type.</p>"},{"location":"api/references/#astx.Literal-functions","title":"Functions","text":""},{"location":"api/references/#astx.Literal.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.Literal.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST representation for the object.</p>"},{"location":"api/references/#astx.LiteralInt16","title":"<code>LiteralInt16</code>","text":"<p>             Bases: <code>Literal</code></p> <p>LiteralInt16 data type class.</p>"},{"location":"api/references/#astx.LiteralInt16-functions","title":"Functions","text":""},{"location":"api/references/#astx.LiteralInt16.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize LiteralInt16.</p>"},{"location":"api/references/#astx.LiteralInt32","title":"<code>LiteralInt32</code>","text":"<p>             Bases: <code>Literal</code></p> <p>LiteralInt32 data type class.</p>"},{"location":"api/references/#astx.LiteralInt32-functions","title":"Functions","text":""},{"location":"api/references/#astx.LiteralInt32.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize LiteralInt32.</p>"},{"location":"api/references/#astx.LiteralInt64","title":"<code>LiteralInt64</code>","text":"<p>             Bases: <code>Literal</code></p> <p>LiteralInt64 data type class.</p>"},{"location":"api/references/#astx.LiteralInt64-functions","title":"Functions","text":""},{"location":"api/references/#astx.LiteralInt64.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize LiteralInt64.</p>"},{"location":"api/references/#astx.LiteralInt8","title":"<code>LiteralInt8</code>","text":"<p>             Bases: <code>Literal</code></p> <p>LiteralInt8 data type class.</p>"},{"location":"api/references/#astx.LiteralInt8-functions","title":"Functions","text":""},{"location":"api/references/#astx.LiteralInt8.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize LiteralInt8.</p>"},{"location":"api/references/#astx.Module","title":"<code>Module</code>","text":"<p>             Bases: <code>Block</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.Module-attributes","title":"Attributes","text":""},{"location":"api/references/#astx.Module.block","title":"<code>block: list[AST]</code>  <code>property</code>","text":"<p>Define an alias for self.nodes.</p>"},{"location":"api/references/#astx.Module-functions","title":"Functions","text":""},{"location":"api/references/#astx.Module.__init__","title":"<code>__init__(name='main')</code>","text":"<p>Initialize the AST instance.</p>"},{"location":"api/references/#astx.Module.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p>"},{"location":"api/references/#astx.Module.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.MutabilityKind","title":"<code>MutabilityKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Definition for different kind of mutability.</p>"},{"location":"api/references/#astx.Number","title":"<code>Number</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>Number data type expression.</p>"},{"location":"api/references/#astx.OperatorType","title":"<code>OperatorType</code>","text":"<p>             Bases: <code>DataType</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.ScopeKind","title":"<code>ScopeKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Definition for different kind of scopes.</p>"},{"location":"api/references/#astx.SignedInteger","title":"<code>SignedInteger</code>","text":"<p>             Bases: <code>Integer</code></p> <p>Signed integer number data type expression.</p>"},{"location":"api/references/#astx.StatementType","title":"<code>StatementType</code>","text":"<p>             Bases: <code>AST</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.UnaryOp","title":"<code>UnaryOp</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>AST class for the unary operator.</p>"},{"location":"api/references/#astx.UnaryOp-functions","title":"Functions","text":""},{"location":"api/references/#astx.UnaryOp.__init__","title":"<code>__init__(op_code, operand, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the UnaryOp instance.</p>"},{"location":"api/references/#astx.UnaryOp.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.UnaryOp.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Undefined","title":"<code>Undefined</code>","text":"<p>             Bases: <code>Expr</code></p> <p>Undefined expression class.</p>"},{"location":"api/references/#astx.Undefined-functions","title":"Functions","text":""},{"location":"api/references/#astx.Undefined.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a simple structure that represents the object.</p>"},{"location":"api/references/#astx.Variable","title":"<code>Variable</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>AST class for the variable usage.</p>"},{"location":"api/references/#astx.Variable-functions","title":"Functions","text":""},{"location":"api/references/#astx.Variable.__init__","title":"<code>__init__(name, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Variable instance.</p>"},{"location":"api/references/#astx.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.Variable.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.VariableAssignment","title":"<code>VariableAssignment</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p>"},{"location":"api/references/#astx.VariableAssignment-functions","title":"Functions","text":""},{"location":"api/references/#astx.VariableAssignment.__init__","title":"<code>__init__(name, value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the VarExprAST instance.</p>"},{"location":"api/references/#astx.VariableAssignment.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.VariableAssignment.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.VariableDeclaration","title":"<code>VariableDeclaration</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p>"},{"location":"api/references/#astx.VariableDeclaration-functions","title":"Functions","text":""},{"location":"api/references/#astx.VariableDeclaration.__init__","title":"<code>__init__(name, type_, mutability=MutabilityKind.constant, visibility=VisibilityKind.public, scope=ScopeKind.local, value=UNDEFINED, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the VarExprAST instance.</p>"},{"location":"api/references/#astx.VariableDeclaration.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.VariableDeclaration.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.VisibilityKind","title":"<code>VisibilityKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Definition of different kind of visibility.</p>"},{"location":"api/references/#astx-functions","title":"Functions","text":""},{"location":"api/references/#astx.get_version","title":"<code>get_version()</code>","text":"<p>Return the program version.</p>"},{"location":"tutorials/for-loop/","title":"Exploring For Loops in ASTx: A Detailed Guide","text":"In\u00a0[1]: Copied! <pre>import astx\n</pre> import astx <p>With ASTx imported, we're now ready to explore the different types of loops it supports.</p> In\u00a0[2]: Copied! <pre># Declare a loop variable\ndecl_a = astx.InlineVariableDeclaration(\"a\", type_=astx.Int32)\n\n# Create a block for loop body\nbody_for = astx.Block()\n\n# Define a For Range Loop from 0 to 10 with step 1\nfor_1000 = astx.ForRangeLoop(\n    variable=decl_a,\n    start=astx.LiteralInt32(0),\n    end=astx.LiteralInt32(1000),\n    step=astx.LiteralInt32(1),\n    body=body_for\n)\n\nfor_1000\n</pre> # Declare a loop variable decl_a = astx.InlineVariableDeclaration(\"a\", type_=astx.Int32)  # Create a block for loop body body_for = astx.Block()  # Define a For Range Loop from 0 to 10 with step 1 for_1000 = astx.ForRangeLoop(     variable=decl_a,     start=astx.LiteralInt32(0),     end=astx.LiteralInt32(1000),     step=astx.LiteralInt32(1),     body=body_for )  for_1000 Out[2]: <pre>ForRangeLoop</pre> <p>In this example, we declare an inline variable <code>a</code> of type <code>Int32</code>. The <code>ForRangeLoop</code> is then defined with this variable, starting at 0, ending at 10, and stepping by 1 on each iteration. The loop's body, which will contain the instructions to be repeated, is currently an empty block.</p> In\u00a0[3]: Copied! <pre># Declare and initialize the loop variable\ndecl_a = astx.InlineVariableDeclaration(\"a\", type_=astx.Int32, value=astx.LiteralInt32(0))\nvar_a = astx.Variable(\"a\")\n\n# Create a block for loop body\nbody_for = astx.Block()\n\n# Define a For Count Loop\nfor_counter = astx.ForCountLoop(\n    initializer=decl_a,\n    condition=var_a &lt; astx.LiteralInt32(10),\n    update=astx.UnaryOp(\"++\", var_a),\n    body=body_for\n)\n\nfor_counter\n</pre> # Declare and initialize the loop variable decl_a = astx.InlineVariableDeclaration(\"a\", type_=astx.Int32, value=astx.LiteralInt32(0)) var_a = astx.Variable(\"a\")  # Create a block for loop body body_for = astx.Block()  # Define a For Count Loop for_counter = astx.ForCountLoop(     initializer=decl_a,     condition=var_a &lt; astx.LiteralInt32(10),     update=astx.UnaryOp(\"++\", var_a),     body=body_for )  for_counter Out[3]: <pre>ForCountLoop</pre>"},{"location":"tutorials/for-loop/#exploring-for-loops-in-astx-a-detailed-guide","title":"Exploring For Loops in ASTx: A Detailed Guide\u00b6","text":""},{"location":"tutorials/for-loop/#introduction","title":"Introduction\u00b6","text":"<p>Loops are a fundamental aspect of programming, offering a way to repeat a set of instructions under specific conditions. In this blog post, we'll delve into how ASTx, a versatile tool for manipulating abstract syntax trees (ASTs), handles two types of loops: the <code>For Range Loop</code> and the <code>For Count Loop</code>. Understanding these constructs in ASTx is crucial for anyone looking to automate or analyze code patterns efficiently.</p>"},{"location":"tutorials/for-loop/#setting-up","title":"Setting Up\u00b6","text":"<p>Before we dive into the specifics of loop creation in ASTx, let's start by setting up our environment. This step is as simple as importing the ASTx library:</p>"},{"location":"tutorials/for-loop/#for-range-loop","title":"For Range Loop\u00b6","text":"<p>The <code>For Range Loop</code> in ASTx allows you to specify the starting point, end condition, and iteration step. This loop is especially useful for scenarios where you need to iterate over a range of values.</p>"},{"location":"tutorials/for-loop/#for-count-loop","title":"For Count Loop\u00b6","text":"<p>The <code>For Count Loop</code>, reminiscent of the classic <code>for</code> loop in C or C++, is another powerful looping construct available in ASTx. This loop is characterized by its three components: an initializer, a condition, and an update expression.</p>"},{"location":"tutorials/functions/","title":"Functions in ASTx: A Comprehensive Guide","text":"In\u00a0[1]: Copied! <pre>import astx\n\nmodule = astx.Module()\n</pre> import astx  module = astx.Module() In\u00a0[2]: Copied! <pre># Define function arguments\narg_a = astx.Argument(name=\"a\", type_=astx.Int32)\narg_b = astx.Argument(name=\"b\", type_=astx.Int32)\narg_c = astx.Argument(name=\"c\", type_=astx.Int32)\n\n# Create ASTx Variable objects\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Create a literal integer\nlit_1 = astx.LiteralInt32(1)\n\n# Define the basic operation\nbasic_op = lit_1 + b - a * c / a + (b - a / a)\n\n# Create the function prototype\nfn_math_proto = astx.FunctionPrototype(\n    name=\"simple_math\", \n    args=(arg_a, arg_b, arg_c), \n    return_type=astx.Int32\n)\n\n# Create the function body\nfn_math_block = astx.Block()\nfn_math_block.append(astx.FunctionReturn(basic_op))\n\n# Define the function\nfn_math = astx.Function(prototype=fn_math_proto, body=fn_math_block)\nfn_math\n</pre> # Define function arguments arg_a = astx.Argument(name=\"a\", type_=astx.Int32) arg_b = astx.Argument(name=\"b\", type_=astx.Int32) arg_c = astx.Argument(name=\"c\", type_=astx.Int32)  # Create ASTx Variable objects a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Create a literal integer lit_1 = astx.LiteralInt32(1)  # Define the basic operation basic_op = lit_1 + b - a * c / a + (b - a / a)  # Create the function prototype fn_math_proto = astx.FunctionPrototype(     name=\"simple_math\",      args=(arg_a, arg_b, arg_c),      return_type=astx.Int32 )  # Create the function body fn_math_block = astx.Block() fn_math_block.append(astx.FunctionReturn(basic_op))  # Define the function fn_math = astx.Function(prototype=fn_math_proto, body=fn_math_block) fn_math Out[2]: <pre>Function</pre> <p>In this code snippet, we define three arguments for our function: <code>a</code>, <code>b</code>, and <code>c</code>, all of integer type. We then create a mathematical expression that combines these arguments in various operations. The <code>FunctionPrototype</code> defines the function's signature, including its name, arguments, and return type. Finally, the function body is created and the function is defined with its prototype and body.</p> In\u00a0[3]: Copied! <pre># Define the main function prototype\nfn_main_proto = astx.FunctionPrototype(\n    name=\"main\", \n    args=tuple(), \n    return_type=astx.Int32\n)\n\n# Create the main function block\nfn_main_block = astx.Block()\n\n# Create a function call to 'simple_math'\nfn_math_call = fn_math(\n    args=(\n        astx.LiteralInt32(1),\n        astx.LiteralInt32(2),\n        astx.LiteralInt32(3)\n    )\n)\n\n# Append the function call to the main block\nfn_main_block.append(\n    astx.FunctionReturn(\n        fn_math_call,\n    )\n)\n\n# NOTE: it is the same as:\n# fn_math_call = astx.FunctionCall(\n#     \"simple_math\",\n#     args=(\n#         astx.LiteralInt32(1),\n#         astx.LiteralInt32(2),\n#         astx.LiteralInt32(3)\n#     )\n# )\n\n\n# Define the main function\nfn_main = astx.Function(prototype=fn_main_proto, body=fn_main_block)\n\n# Append the main function to the module\nmodule.block.append(fn_main)\nmodule\n</pre> # Define the main function prototype fn_main_proto = astx.FunctionPrototype(     name=\"main\",      args=tuple(),      return_type=astx.Int32 )  # Create the main function block fn_main_block = astx.Block()  # Create a function call to 'simple_math' fn_math_call = fn_math(     args=(         astx.LiteralInt32(1),         astx.LiteralInt32(2),         astx.LiteralInt32(3)     ) )  # Append the function call to the main block fn_main_block.append(     astx.FunctionReturn(         fn_math_call,     ) )  # NOTE: it is the same as: # fn_math_call = astx.FunctionCall( #     \"simple_math\", #     args=( #         astx.LiteralInt32(1), #         astx.LiteralInt32(2), #         astx.LiteralInt32(3) #     ) # )   # Define the main function fn_main = astx.Function(prototype=fn_main_proto, body=fn_main_block)  # Append the main function to the module module.block.append(fn_main) module Out[3]: <pre>Module</pre> <p>In this section, we define the main function with no arguments and an integer return type. We then create a function call to <code>simple_math</code> with specific values. This call is appended to the main function block, which is then used to define the main function of our module.</p>"},{"location":"tutorials/functions/#functions-in-astx-a-comprehensive-guide","title":"Functions in ASTx: A Comprehensive Guide\u00b6","text":""},{"location":"tutorials/functions/#introduction","title":"Introduction\u00b6","text":"<p>Welcome to another chapter in our exploration of ASTx, a powerful tool for manipulating abstract syntax trees (ASTs) in various programming languages. In this post, we delve into the realm of functions - a crucial element in programming that encapsulates blocks of code for specific tasks. Understanding how to define and use functions in ASTx is essential for anyone looking to leverage its full potential.</p>"},{"location":"tutorials/functions/#setting-the-stage","title":"Setting the Stage\u00b6","text":"<p>To kick things off, we begin by importing ASTx and initializing a module. This foundational step is crucial for structuring our work with functions in ASTx.</p>"},{"location":"tutorials/functions/#creating-a-function-for-simple-calculations","title":"Creating a Function for Simple Calculations\u00b6","text":"<p>In this section, we demonstrate how to create a function for performing a basic mathematical operation using ASTx. This example will illustrate how to define function arguments, perform operations, and structure a function in ASTx.</p>"},{"location":"tutorials/functions/#integrating-the-function-in-a-main-block","title":"Integrating the Function in a Main Block\u00b6","text":"<p>Now, let's see how to integrate this function into the main block of our module.</p>"},{"location":"tutorials/functions/#conclusion","title":"Conclusion\u00b6","text":"<p>Functions are a vital aspect of programming, and mastering their usage in ASTx is key to unlocking the full potential of this tool. Through the creation of a simple mathematical function and its integration into a main block, this guide provides a practical and clear understanding of how functions can be constructed and utilized in ASTx.</p> <p>Whether you're a beginner or an experienced developer, grasping the concepts of functions in ASTx is an invaluable addition to your programming skills. Stay tuned for more insights and tutorials as we continue to explore the fascinating world of ASTx.</p>"},{"location":"tutorials/get-started/","title":"Get Started","text":"In\u00a0[1]: Copied! <pre># import display for AST visualization\nfrom IPython.display import display\nimport astx\n</pre> # import display for AST visualization from IPython.display import display import astx <p>Then we create an instance of the Module class, and this instance will be the first node of the tree, or the root node. After that, we declare the variables and literal that will be part of the basic operation that we will parse into an AST.</p> In\u00a0[3]: Copied! <pre># Create module\nmodule = astx.Module()\n\n# Declare variables\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32, value=astx.LiteralInt32(1))\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32, value=astx.LiteralInt32(2))\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32, value=astx.LiteralInt32(4))\n\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Declare literal\nlit_1 = astx.LiteralInt32(1)\n\n# State the expression\nbasic_op = lit_1 + b - a * c / a + (b - a / a)\n</pre> # Create module module = astx.Module()  # Declare variables decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32, value=astx.LiteralInt32(1)) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32, value=astx.LiteralInt32(2)) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32, value=astx.LiteralInt32(4))  a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Declare literal lit_1 = astx.LiteralInt32(1)  # State the expression basic_op = lit_1 + b - a * c / a + (b - a / a) <p>After the basic expression is stated, we create an instance of the Function class. As mentioned in the API documentation, each instance of the Function class must have a prototype and a body, so we'll create those first.</p> <p>The body is made of a block that is created and the variables, as well as the basic operation, are appended to it afterwards.</p> In\u00a0[4]: Copied! <pre># Create FunctionPrototype\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=[], return_type=astx.Int32\n)\n\n# Create FunctionReturn\nmain_block = astx.Block()\nmain_block.append(decl_a)\nmain_block.append(decl_b)\nmain_block.append(decl_c)\nmain_block.append(astx.FunctionReturn(basic_op))\n\n# Create Function\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\n# Append function to module\nmodule.block.append(main_fn)\n</pre> # Create FunctionPrototype main_proto = astx.FunctionPrototype(     name=\"main\", args=[], return_type=astx.Int32 )  # Create FunctionReturn main_block = astx.Block() main_block.append(decl_a) main_block.append(decl_b) main_block.append(decl_c) main_block.append(astx.FunctionReturn(basic_op))  # Create Function main_fn = astx.Function(prototype=main_proto, body=main_block)  # Append function to module module.block.append(main_fn) <p>After this, the module is complete. We can get its AST structure as a dictionary, as well as a PNG representation.</p> In\u00a0[5]: Copied! <pre># Create dictionary representation\nmodule.get_struct()\n</pre> # Create dictionary representation module.get_struct() Out[5]: <pre>{'MODULE[main]': [{'FUNCTION[main]': {'args': [],\n    'body': [{'VariableDeclaration[a, Int32] = LiteralInt32(1)': LiteralInt32: temp_14},\n     {'VariableDeclaration[b, Int32] = LiteralInt32(2)': LiteralInt32: temp_15},\n     {'VariableDeclaration[c, Int32] = LiteralInt32(4)': LiteralInt32: temp_16},\n     {'RETURN': {'BINARY[+]': {'lhs': {'BINARY[-]': {'lhs': {'BINARY[+]': {'lhs': {'Literal[Int32]': 1},\n            'rhs': {'Variable[b]': Variable: b}}},\n          'rhs': {'BINARY[/]': {'lhs': {'BINARY[*]': {'lhs': {'Variable[a]': Variable: a},\n              'rhs': {'Variable[c]': Variable: c}}},\n            'rhs': {'Variable[a]': Variable: a}}}}},\n        'rhs': {'BINARY[-]': {'lhs': {'Variable[b]': Variable: b},\n          'rhs': {'BINARY[/]': {'lhs': {'Variable[a]': Variable: a},\n            'rhs': {'Variable[a]': Variable: a}}}}}}}}]}}]}</pre> In\u00a0[6]: Copied! <pre># Create PNG representation\nmodule\n</pre> # Create PNG representation module Out[6]: <pre>Module</pre> <p>We can also get the PNG representation of parts of the AST, such as <code>basic_op</code> and the variable <code>a</code>:</p> In\u00a0[7]: Copied! <pre># Create PNG representation\nbasic_op\n</pre> # Create PNG representation basic_op Out[7]: <pre>BinaryOp: temp_27</pre> In\u00a0[8]: Copied! <pre># Create PNG representation\na\n</pre> # Create PNG representation a Out[8]: <pre>Variable: a</pre> In\u00a0[9]: Copied! <pre># Import visualization module\nfrom astx import viz\n\n# Create PNG representation with diamond shape\nviz.visualize(a.get_struct(), shape=\"diamond\")\n</pre> # Import visualization module from astx import viz  # Create PNG representation with diamond shape viz.visualize(a.get_struct(), shape=\"diamond\") In\u00a0[10]: Copied! <pre># Create PNG representation with circle shape\nviz.visualize(a.get_struct(), shape=\"circle\")\n</pre> # Create PNG representation with circle shape viz.visualize(a.get_struct(), shape=\"circle\") In\u00a0[11]: Copied! <pre># Create PNG representation with ellipse shape\nviz.visualize(a.get_struct(), shape=\"ellipse\")\n</pre> # Create PNG representation with ellipse shape viz.visualize(a.get_struct(), shape=\"ellipse\")"},{"location":"tutorials/get-started/#get-started","title":"Get Started\u00b6","text":""},{"location":"tutorials/get-started/#introduction","title":"Introduction\u00b6","text":"<p>The ASTx library is an agnostic framework for constructing and representing Abstract Syntax Trees (ASTs). Its primary objective is to provide a versatile and language-independent structure for ASTs, with the flexibility to be utilized across various programming languages and parsing tools. ASTx doesn't aim to be a lexer or a parser, although it could be used by any programming language or parser in order to provide a high level representation of the AST.</p> <p>Many kinds of nodes (classes) are currently supported. Below is a list with just some examples:</p>"},{"location":"tutorials/get-started/#statements","title":"Statements:\u00b6","text":"<ul> <li>Function</li> <li>Function Prototype</li> <li>FunctionReturn</li> <li>ForRangeLoop</li> <li>VarDecl</li> </ul>"},{"location":"tutorials/get-started/#operators","title":"Operators:\u00b6","text":"<ul> <li>BinaryOp</li> <li>UnaryOp</li> </ul>"},{"location":"tutorials/get-started/#data-types","title":"Data types:\u00b6","text":"<ul> <li>Boolean</li> <li>Literal</li> <li>Variable</li> </ul> <p>The ASTx project is still under development, so new classes may be added to the ones above at any time.</p> <p>Below are installation instructions and an example, so you can have an overview of how you can leverage the ASTx library for your needs.</p>"},{"location":"tutorials/get-started/#installation","title":"Installation\u00b6","text":"<p>The first step is to install ASTx. You can do it simply by running the command below in your terminal: <code>$ pip install astx</code> If you need more information on installation, you can get it in the ASTx installation page. After that, you can just open a Jupyter Notebook instance and start writing your first AST.</p>"},{"location":"tutorials/get-started/#example-an-ast-of-a-series-of-mathematical-operations","title":"Example: an AST of a series of mathematical operations\u00b6","text":"<p>Here we will present a quick example of an AST of the expression  <code>basic_op = lit_1 + b - a * c / a + (b - a / a)</code>, in which  $~~~~$ <code>lit_1</code> is a defined integer, and  $~~~~$ <code>a</code>, <code>b</code>, and <code>c</code> are variables. The first thing to do is, in your Jupyter Notebook instance, import <code>display</code>, which will allow you to have a basic visualization of the AST, and the astx library itself.</p>"},{"location":"tutorials/get-started/#custom-shapes","title":"Custom shapes\u00b6","text":"<p>It is also possible to use custom shapes for the output using the function <code>viz.visualize</code>. The Default shape is <code>box</code>, but  <code>diamond</code>, <code>ellipse</code>, and <code>circle</code> are also avaiable options.</p>"},{"location":"tutorials/get-started/#conclusion","title":"Conclusion\u00b6","text":"<p>This guide provides clear instructions and a simple example for you to start using the ASTx library. But this is just the beginning of your journey. Make sure to check out the other tutorials available, such as the one for variables and the one for functions.</p>"},{"location":"tutorials/variables/","title":"Understanding Variables in ASTx: A Comprehensive Guide","text":"<p>First, ensure you have astx installed:</p> <pre>$ pip install astx\n</pre> <p>Now, you can import the libraries and modules necessary for this tutorial:</p> In\u00a0[1]: Copied! <pre>from __future__ import annotations\n\nimport copy\n\nfrom typing import Any\n\nfrom IPython.display import display\n\nimport astx\n</pre> from __future__ import annotations  import copy  from typing import Any  from IPython.display import display  import astx <p>This code block sets the stage for our exploration into ASTx's variable handling. We're importing essential modules like <code>copy</code> for deep copying objects, <code>typing</code> for type annotations, and <code>IPython.display</code> for displaying outputs in an interactive Python environment. Most importantly, we import <code>astx</code>, the library central to our discussion.</p> In\u00a0[2]: Copied! <pre># Initialize the ASTx module\nmodule = astx.Module()\n\n# Declare variables 'a', 'b', and 'c' with initial values\ndecl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32, value=astx.LiteralInt32(1))\ndecl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32, value=astx.LiteralInt32(2))\ndecl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32, value=astx.LiteralInt32(4))\n\n# Reassign a new value to variable 'c'\nassign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3))\n\n# Create ASTx Variable objects\na = astx.Variable(name=\"a\")\nb = astx.Variable(name=\"b\")\nc = astx.Variable(name=\"c\")\n\n# Create a literal integer\nlit_1 = astx.LiteralInt32(1)\n\n# Perform basic operations\nbasic_op = lit_1 + b - a * c / a\n\n# Define the main function prototype\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=[], return_type=astx.Int32\n)\n\n# Create a block of code and append variable declarations and operations\nmain_block = astx.Block()\nmain_block.append(decl_a)\nmain_block.append(decl_b)\nmain_block.append(decl_c)\nmain_block.append(assign_c)\nmain_block.append(astx.FunctionReturn(basic_op))\n\n# Define the main function with its body\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\n# Append the main function to the module block\nmodule.block.append(main_fn)\nmodule\n</pre> # Initialize the ASTx module module = astx.Module()  # Declare variables 'a', 'b', and 'c' with initial values decl_a = astx.VariableDeclaration(name=\"a\", type_=astx.Int32, value=astx.LiteralInt32(1)) decl_b = astx.VariableDeclaration(name=\"b\", type_=astx.Int32, value=astx.LiteralInt32(2)) decl_c = astx.VariableDeclaration(name=\"c\", type_=astx.Int32, value=astx.LiteralInt32(4))  # Reassign a new value to variable 'c' assign_c = astx.VariableAssignment(name=\"c\", value=astx.LiteralInt32(3))  # Create ASTx Variable objects a = astx.Variable(name=\"a\") b = astx.Variable(name=\"b\") c = astx.Variable(name=\"c\")  # Create a literal integer lit_1 = astx.LiteralInt32(1)  # Perform basic operations basic_op = lit_1 + b - a * c / a  # Define the main function prototype main_proto = astx.FunctionPrototype(     name=\"main\", args=[], return_type=astx.Int32 )  # Create a block of code and append variable declarations and operations main_block = astx.Block() main_block.append(decl_a) main_block.append(decl_b) main_block.append(decl_c) main_block.append(assign_c) main_block.append(astx.FunctionReturn(basic_op))  # Define the main function with its body main_fn = astx.Function(prototype=main_proto, body=main_block)  # Append the main function to the module block module.block.append(main_fn) module Out[2]: <pre>Module: main</pre> <p>In this code snippet, we start by initializing an ASTx module. We then declare three variables (<code>a</code>, <code>b</code>, and <code>c</code>) with initial integer values using <code>VarDecl</code>. Interestingly, we demonstrate how to reassign a new value to an existing variable (<code>c</code> in this case). The <code>Variable</code> class in ASTx is used to create variable objects that can be manipulated further.</p> <p>Next, we create a simple mathematical operation involving these variables, showcasing how ASTx can elegantly handle arithmetic expressions. The code concludes with the creation of a main function prototype, a block of code containing our declarations and operations, and the definition of the main function itself.</p>"},{"location":"tutorials/variables/#understanding-variables-in-astx-a-comprehensive-guide","title":"Understanding Variables in ASTx: A Comprehensive Guide\u00b6","text":""},{"location":"tutorials/variables/#introduction","title":"Introduction\u00b6","text":"<p>In the world of programming, the concept of variables is fundamental, acting as the cornerstone for writing effective and efficient code. However, the way variables are declared and used can vary significantly across different programming languages. This variability poses a challenge for tools that need to operate across these languages, such as ASTx. ASTx, an advanced tool for manipulating abstract syntax trees (ASTs), addresses this challenge by offering a generic approach to handling variables. This blog post delves into the nuances of working with variables in ASTx, providing insights into both declaration and usage, with a focus on simplicity and generality.</p>"},{"location":"tutorials/variables/#setting-up-the-environment","title":"Setting Up the Environment\u00b6","text":"<p>To get started with variables in ASTx, you need to set up your Python environment appropriately. This setup involves importing necessary modules and ensuring that your environment is primed for the tasks ahead. Here's how you can set it up:</p>"},{"location":"tutorials/variables/#creating-variables-and-performing-simple-math","title":"Creating Variables and Performing Simple Math\u00b6","text":"<p>Now, let's dive into the practical aspects of variable declaration and usage in ASTx, particularly how these variables can be used in basic mathematical operations.</p>"},{"location":"tutorials/variables/#conclusion","title":"Conclusion\u00b6","text":"<p>This exploration into the world of variables within ASTx reveals the power and flexibility of this tool. By abstracting the intricacies of variable handling across different programming languages, ASTx provides a unified and streamlined approach. Whether you are a seasoned developer or just starting, understanding how to effectively declare and manipulate variables in ASTx is a valuable skill in your programming toolkit.</p>"}]}