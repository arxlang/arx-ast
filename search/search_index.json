{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ASTx Library: A Versatile Toolkit for Language Representation","text":"<p>ASTx is a groundbreaking library designed to encapsulate language components in an agnostic and pythonic way. It provides a comprehensive set of classes and functionalities, allowing developers to articulate the core elements of any programming language.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://arxlang.github.io/astx</li> </ul>"},{"location":"#core-features","title":"Core Features","text":""},{"location":"#1-expressive-language-components","title":"1. Expressive Language Components","text":"<p>ASTx offers a rich suite of classes to describe essential language constructs such as:</p> <ul> <li><code>If</code> statements</li> <li><code>For</code> loops</li> <li><code>Function</code> declarations and usages</li> <li>Variables</li> <li>Data Types</li> <li>Operations</li> <li>And more</li> </ul> <p>These classes enable a concise and clear representation, providing an intuitive way to model various programming constructs.</p>"},{"location":"#2-symbol-table-class","title":"2. Symbol Table Class","text":"<p>An integral part of ASTx, the Symbol Table class facilitates the translation of ASTx expressions to other languages like LLVM-IR. This class acts as a mapping layer, allowing a seamless connection between ASTx expressions and target language representations.</p>"},{"location":"#3-language-agnostic-design","title":"3. Language Agnostic Design","text":"<p>Uniquely tailored to be independent of specific programming languages, ASTx offers a flexible foundation. It strives to provide initial components that can describe any programming language, giving users the freedom to work with multiple languages effortlessly.</p>"},{"location":"#4-integration-with-projects-like-arx-ir","title":"4. Integration with Projects like ARX-IR","text":"<p>ASTx has proven to be a vital tool in projects like ARX-IR, where it's leveraged to translate Abstract Syntax Trees (AST) into LLVM-IR. This showcases the library's adaptability and potential to serve as a foundational layer in various applications.</p>"},{"location":"#why-choose-astx","title":"Why Choose ASTx?","text":"<p>ASTx is not just a library; it's a robust framework that fosters creativity and efficiency in language processing. Its pythonic design, combined with the power to handle different language constructs, positions ASTx as an invaluable resource for developers and researchers alike.</p> <p>Whether you're building a compiler, working on language translation, or exploring new frontiers in programming language design, ASTx offers a reliable and extensible toolkit to support your endeavors.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>You can explore the ASTx library and dive into its capabilities by accessing the official documentation. For those interested in contributing or seeking further insights, the ASTx community provides extensive support and collaboration opportunities.</p> <p>Unlock the potential of language representation with ASTx, and join us in shaping the future of programming languages.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#071-2023-12-05","title":"0.7.1 (2023-12-05)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>Fix typing issues (#19) (9cb53c4)</li> </ul>"},{"location":"changelog/#070-2023-12-05","title":"0.7.0 (2023-12-05)","text":""},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add ref attribute to the Expr class (#18) (60b9b0e)</li> </ul>"},{"location":"changelog/#060-2023-09-07","title":"0.6.0 (2023-09-07)","text":""},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Add options for the graph visualization objects shape (#16) (93f6ebd)</li> </ul>"},{"location":"changelog/#051-2023-09-07","title":"0.5.1 (2023-09-07)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix docs generation (#15) (e1bfb4e)</li> </ul>"},{"location":"changelog/#050-2023-09-06","title":"0.5.0 (2023-09-06)","text":""},{"location":"changelog/#features_2","title":"Features","text":"<ul> <li>Add initial support for jupyter display with graphviz (#14) (35a8c98)</li> </ul>"},{"location":"changelog/#040-2023-09-05","title":"0.4.0 (2023-09-05)","text":""},{"location":"changelog/#features_3","title":"Features","text":"<ul> <li>Represent the ASTx in <code>yaml</code> and <code>json</code> formats (#13) (26d22af)</li> </ul>"},{"location":"changelog/#033-2023-08-30","title":"0.3.3 (2023-08-30)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>config: Fix configuration and improve documentation (#12) (fbb8898)</li> </ul>"},{"location":"changelog/#032-2023-08-22","title":"0.3.2 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix logo in the documentation and fix configuration files style. (#11) (8552e08)</li> </ul>"},{"location":"changelog/#031-2023-08-22","title":"0.3.1 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_4","title":"Bug Fixes","text":"<ul> <li>fix documentation release workflow (#10) (6cfb9a6)</li> </ul>"},{"location":"changelog/#030-2023-08-22","title":"0.3.0 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_5","title":"Bug Fixes","text":"<ul> <li>Fix the current linter configuration and the dependencies' pinning (#9) (d310511)</li> </ul>"},{"location":"changelog/#features_4","title":"Features","text":"<ul> <li>Add support for ForRangeLoop and ForCountLoop (#7) (bb77de1)</li> </ul>"},{"location":"changelog/#021-2023-08-07","title":"0.2.1 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_6","title":"Bug Fixes","text":"<ul> <li>Refactor Control flow classes and improve Documentation (#6) (4013398)</li> </ul>"},{"location":"changelog/#020-2023-08-07","title":"0.2.0 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_7","title":"Bug Fixes","text":"<ul> <li>Fix release configuration (#5) (13cd6e1)</li> </ul>"},{"location":"changelog/#features_5","title":"Features","text":"<ul> <li>Overload DataType operators (#4) (3b93128)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/astx</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/arxlang/astx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ASTx could always use more documentation, whether as part of the official ASTx docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/arxlang/astx/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are   welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>astx</code> for local development.</p> <ol> <li> <p>Fork the <code>astx</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> </li> </ol> <pre><code>$ git clone git@github.com:your_name_here/astx.git\n$ cd astx/\n</code></pre> <ol> <li>Create a new virtual environment and install your local copy into that:</li> </ol> <pre><code># note: you can use mamba or conda or micromamba\n$ mamba env create --file conda/dev.yaml\n$ conda activate astx\n$ poetry install\n</code></pre> <ol> <li>Create a branch for local development:</li> </ol> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n# Now you can make your changes locally.\n</code></pre> <ol> <li>When you\u2019re done making changes, check that your changes pass the linter and     the tests:</li> </ol> <pre><code>$ makim tests.linter\n$ makim tests.unittest\n</code></pre> <ol> <li>Commit your changes and push your branch to GitHub:</li> </ol> <pre><code>$ git add . $ git commit -m \u201cYour detailed description of your changes.\u201d\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> <ol> <li>Submit a pull request through the GitHub website.</li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put your     new functionality into a function with a docstring, and add the feature to     the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests, you can use something like:</p> <pre><code>$ pytest tests.test_arxast\n</code></pre> <p>or</p> <pre><code>$ makim tests.unittest --path \"tests/test_arxast\" --params \"-k mytest_func\"\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>feat(pencil)!: The graphiteWidth option has been removed</code> Breaking Release <p>NOTE: Breaking change's commit message prefix should have <code>!</code> before <code>:</code>. Also, ensure to specify <code>feat</code> or <code>fix</code> in the prefix.</p> <p>References:</p> <ul> <li>https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</li> <li>https://www.conventionalcommits.org/en/v1.0.0/</li> </ul> <p>This project uses the <code>squash and merge</code> strategy, so ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"ASTx Example","text":"In\u00a0[1]: Copied! <pre>from IPython.display import display\nimport astx\n</pre> from IPython.display import display import astx In\u00a0[2]: Copied! <pre>module = astx.Module()\n\na = astx.Variable(name=\"a\", type_=astx.Int32, value=astx.Int32Literal(1))\nb = astx.Variable(name=\"b\", type_=astx.Int32, value=astx.Int32Literal(2))\nc = astx.Variable(name=\"c\", type_=astx.Int32, value=astx.Int32Literal(4))\n\nlit_1 = astx.Int32Literal(1)\n\nbasic_op = lit_1 + b - a * c / a + (b - a / a)\n\nmain_proto = astx.FunctionPrototype(\n    name=\"main\", args=[], return_type=astx.Int32\n)\nmain_block = astx.Block()\nmain_block.append(astx.Return(basic_op))\nmain_fn = astx.Function(prototype=main_proto, body=main_block)\n\nmodule.block.append(main_fn)\n</pre> module = astx.Module()  a = astx.Variable(name=\"a\", type_=astx.Int32, value=astx.Int32Literal(1)) b = astx.Variable(name=\"b\", type_=astx.Int32, value=astx.Int32Literal(2)) c = astx.Variable(name=\"c\", type_=astx.Int32, value=astx.Int32Literal(4))  lit_1 = astx.Int32Literal(1)  basic_op = lit_1 + b - a * c / a + (b - a / a)  main_proto = astx.FunctionPrototype(     name=\"main\", args=[], return_type=astx.Int32 ) main_block = astx.Block() main_block.append(astx.Return(basic_op)) main_fn = astx.Function(prototype=main_proto, body=main_block)  module.block.append(main_fn) In\u00a0[3]: Copied! <pre>module.get_struct()\n</pre> module.get_struct() Out[3]: <pre>{'MODULE[main]': [{'FUNCTION[main]': {'args': [],\n    'body': [{'RETURN': {'BINARY[+]': {'lhs': {'BINARY[-]': {'lhs': {'BINARY[+]': {'lhs': {'Literal[Int32]': 1},\n            'rhs': {'Variable[b: Int32]': {'Literal[Int32]': 2}}}},\n          'rhs': {'BINARY[/]': {'lhs': {'BINARY[*]': {'lhs': {'Variable[a: Int32]': {'Literal[Int32]': 1}},\n              'rhs': {'Variable[c: Int32]': {'Literal[Int32]': 4}}}},\n            'rhs': {'Variable[a: Int32]': {'Literal[Int32]': 1}}}}}},\n        'rhs': {'BINARY[-]': {'lhs': {'Variable[b: Int32]': {'Literal[Int32]': 2}},\n          'rhs': {'BINARY[/]': {'lhs': {'Variable[a: Int32]': {'Literal[Int32]': 1}},\n            'rhs': {'Variable[a: Int32]': {'Literal[Int32]': 1}}}}}}}}}]}}]}</pre> In\u00a0[4]: Copied! <pre>module\n</pre> module Out[4]: <pre>Module</pre> In\u00a0[5]: Copied! <pre>basic_op\n</pre> basic_op Out[5]: <pre>BinaryOp</pre> In\u00a0[6]: Copied! <pre>a\n</pre> a Out[6]: <pre>Variable</pre> In\u00a0[7]: Copied! <pre>from astx import viz\n</pre> from astx import viz In\u00a0[8]: Copied! <pre>viz.visualize(a.get_struct(), shape=\"diamond\")\n</pre> viz.visualize(a.get_struct(), shape=\"diamond\") In\u00a0[9]: Copied! <pre>viz.visualize(a.get_struct(), shape=\"circle\")\n</pre> viz.visualize(a.get_struct(), shape=\"circle\") In\u00a0[10]: Copied! <pre>viz.visualize(a.get_struct(), shape=\"ellipse\")\n</pre> viz.visualize(a.get_struct(), shape=\"ellipse\")"},{"location":"example/#astx-example","title":"ASTx Example\u00b6","text":""},{"location":"example/#custom-shapes","title":"Custom shapes\u00b6","text":"<p>It is also possible to use custom shapes for the output using the function <code>viz.visualize</code>.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ASTx, run this command in your terminal:</p> <pre><code>$ pip install astx\n</code></pre> <p>This is the preferred method to install ASTx, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for ASTx can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/arxlang/astx\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/arxlang/astx/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/references/","title":"Api references","text":""},{"location":"api/references/#astx","title":"<code>astx</code>","text":"<p>ASTx.</p>"},{"location":"api/references/#astx-classes","title":"Classes","text":""},{"location":"api/references/#astx.AST","title":"<code>AST</code>","text":"<p>AST main expression class.</p>"},{"location":"api/references/#astx.AST-functions","title":"Functions","text":""},{"location":"api/references/#astx.AST.__init__","title":"<code>__init__(loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the AST instance.</p>"},{"location":"api/references/#astx.AST.__repr__","title":"<code>__repr__()</code>","text":"<p>Return an string that represents the object.</p>"},{"location":"api/references/#astx.AST.__str__","title":"<code>__str__()</code>","text":"<p>Return an string that represents the object.</p>"},{"location":"api/references/#astx.AST._repr_png_","title":"<code>_repr_png_()</code>","text":"<p>Return PNG representation of the Graphviz object.</p> <p>This method is specially recognized by Jupyter Notebook to display a Graphviz diagram inline.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>PNG binary data.</p>"},{"location":"api/references/#astx.AST.get_struct","title":"<code>get_struct()</code>  <code>abstractmethod</code>","text":"<p>Return a simple structure that represents the object.</p>"},{"location":"api/references/#astx.AST.to_json","title":"<code>to_json()</code>","text":"<p>Return an json string that represents the object.</p>"},{"location":"api/references/#astx.AST.to_yaml","title":"<code>to_yaml()</code>","text":"<p>Return an yaml string that represents the object.</p>"},{"location":"api/references/#astx.ASTKind","title":"<code>ASTKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>The expression kind class used for downcasting.</p>"},{"location":"api/references/#astx.BinaryOp","title":"<code>BinaryOp</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>AST class for the binary operator.</p>"},{"location":"api/references/#astx.BinaryOp-functions","title":"Functions","text":""},{"location":"api/references/#astx.BinaryOp.__init__","title":"<code>__init__(op_code, lhs, rhs, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the BinaryOp instance.</p>"},{"location":"api/references/#astx.BinaryOp.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.BinaryOp.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure that represents the object.</p>"},{"location":"api/references/#astx.Block","title":"<code>Block</code>","text":"<p>             Bases: <code>AST</code></p> <p>The AST tree.</p>"},{"location":"api/references/#astx.Block-functions","title":"Functions","text":""},{"location":"api/references/#astx.Block.__init__","title":"<code>__init__(name='entry')</code>","text":"<p>Initialize the AST instance.</p>"},{"location":"api/references/#astx.Block.__iter__","title":"<code>__iter__()</code>","text":"<p>Overload <code>iter</code> magic function.</p>"},{"location":"api/references/#astx.Block.__next__","title":"<code>__next__()</code>","text":"<p>Overload <code>next</code> magic function.</p>"},{"location":"api/references/#astx.Block.append","title":"<code>append(value)</code>","text":"<p>Append a new node to the stack.</p>"},{"location":"api/references/#astx.Block.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Boolean","title":"<code>Boolean</code>","text":"<p>             Bases: <code>DataType</code></p> <p>Boolean data type expression.</p>"},{"location":"api/references/#astx.Call","title":"<code>Call</code>","text":"<p>             Bases: <code>Expr</code></p> <p>AST class for function call.</p>"},{"location":"api/references/#astx.Call-functions","title":"Functions","text":""},{"location":"api/references/#astx.Call.__init__","title":"<code>__init__(callee, args, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Call instance.</p>"},{"location":"api/references/#astx.Call.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p>"},{"location":"api/references/#astx.Call.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.DataType","title":"<code>DataType</code>","text":"<p>             Bases: <code>Expr</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.DataType-functions","title":"Functions","text":""},{"location":"api/references/#astx.DataType.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a simple structure that represents the object.</p>"},{"location":"api/references/#astx.DataTypeOps","title":"<code>DataTypeOps</code>","text":"<p>             Bases: <code>DataType</code></p> <p>Overload some magic functions used for the main operations.</p>"},{"location":"api/references/#astx.DataTypeOps-functions","title":"Functions","text":""},{"location":"api/references/#astx.DataTypeOps.__add__","title":"<code>__add__(other)</code>","text":"<p>Overload the magic <code>add</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__div__","title":"<code>__div__(other)</code>","text":"<p>Overload the magic <code>div</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__mod__","title":"<code>__mod__(other)</code>","text":"<p>Overload the magic <code>mod</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__mul__","title":"<code>__mul__(other)</code>","text":"<p>Overload the magic <code>mul</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__pow__","title":"<code>__pow__(other)</code>","text":"<p>Overload the magic <code>pow</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__sub__","title":"<code>__sub__(other)</code>","text":"<p>Overload the magic <code>sub</code> method.</p>"},{"location":"api/references/#astx.DataTypeOps.__truediv__","title":"<code>__truediv__(other)</code>","text":"<p>Overload the magic <code>div</code> method.</p>"},{"location":"api/references/#astx.Expr","title":"<code>Expr</code>","text":"<p>             Bases: <code>AST</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.Float16","title":"<code>Float16</code>","text":"<p>             Bases: <code>Floating</code></p> <p>Float16 data type expression.</p>"},{"location":"api/references/#astx.Float32","title":"<code>Float32</code>","text":"<p>             Bases: <code>Floating</code></p> <p>Float32 data type expression.</p>"},{"location":"api/references/#astx.Float64","title":"<code>Float64</code>","text":"<p>             Bases: <code>Floating</code></p> <p>Float64 data type expression.</p>"},{"location":"api/references/#astx.Floating","title":"<code>Floating</code>","text":"<p>             Bases: <code>Number</code></p> <p>AST for the literal float number.</p>"},{"location":"api/references/#astx.ForCountLoop","title":"<code>ForCountLoop</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for a simple Count-Controlled <code>For</code> Loop statement.</p> <p>This is a very basic <code>for</code> loop, used by languages like C or C++.</p>"},{"location":"api/references/#astx.ForCountLoop-functions","title":"Functions","text":""},{"location":"api/references/#astx.ForCountLoop.__init__","title":"<code>__init__(initializer, condition, update, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the ForStmt instance.</p>"},{"location":"api/references/#astx.ForCountLoop.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.ForCountLoop.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.ForRangeLoop","title":"<code>ForRangeLoop</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for <code>For</code> Loop Range statement.</p>"},{"location":"api/references/#astx.ForRangeLoop-functions","title":"Functions","text":""},{"location":"api/references/#astx.ForRangeLoop.__init__","title":"<code>__init__(variable, start, end, step, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the ForStmt instance.</p>"},{"location":"api/references/#astx.ForRangeLoop.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.ForRangeLoop.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Function","title":"<code>Function</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for function definition.</p>"},{"location":"api/references/#astx.Function-attributes","title":"Attributes","text":""},{"location":"api/references/#astx.Function.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Return the function prototype name.</p>"},{"location":"api/references/#astx.Function-functions","title":"Functions","text":""},{"location":"api/references/#astx.Function.__init__","title":"<code>__init__(prototype, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Function instance.</p>"},{"location":"api/references/#astx.Function.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represent the object.</p>"},{"location":"api/references/#astx.Function.get_struct","title":"<code>get_struct()</code>","text":"<p>Get the AST structure that represent the object.</p>"},{"location":"api/references/#astx.FunctionPrototype","title":"<code>FunctionPrototype</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for function prototype declaration.</p>"},{"location":"api/references/#astx.FunctionPrototype-functions","title":"Functions","text":""},{"location":"api/references/#astx.FunctionPrototype.__init__","title":"<code>__init__(name, args, return_type, scope=ScopeKind.global_, visibility=VisibilityKind.public, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the FunctionPrototype instance.</p>"},{"location":"api/references/#astx.FunctionPrototype.get_struct","title":"<code>get_struct()</code>","text":"<p>Get the AST structure that represent the object.</p>"},{"location":"api/references/#astx.If","title":"<code>If</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for <code>if</code> statement.</p>"},{"location":"api/references/#astx.If-functions","title":"Functions","text":""},{"location":"api/references/#astx.If.__init__","title":"<code>__init__(condition, then, else_=None, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the If instance.</p>"},{"location":"api/references/#astx.If.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p>"},{"location":"api/references/#astx.If.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Int16","title":"<code>Int16</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int16 data type expression.</p>"},{"location":"api/references/#astx.Int32","title":"<code>Int32</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int32 data type expression.</p>"},{"location":"api/references/#astx.Int32Literal","title":"<code>Int32Literal</code>","text":"<p>             Bases: <code>Literal</code></p> <p>Int32Literal data type class.</p>"},{"location":"api/references/#astx.Int32Literal-functions","title":"Functions","text":""},{"location":"api/references/#astx.Int32Literal.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize Int32Literal.</p>"},{"location":"api/references/#astx.Int64","title":"<code>Int64</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int64 data type expression.</p>"},{"location":"api/references/#astx.Int8","title":"<code>Int8</code>","text":"<p>             Bases: <code>SignedInteger</code></p> <p>Int8 data type expression.</p>"},{"location":"api/references/#astx.Integer","title":"<code>Integer</code>","text":"<p>             Bases: <code>Number</code></p> <p>Integer number data type expression.</p>"},{"location":"api/references/#astx.Literal","title":"<code>Literal</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>Literal Data type.</p>"},{"location":"api/references/#astx.Literal-functions","title":"Functions","text":""},{"location":"api/references/#astx.Literal.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.Literal.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST representation for the object.</p>"},{"location":"api/references/#astx.Module","title":"<code>Module</code>","text":"<p>             Bases: <code>Block</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.Module-attributes","title":"Attributes","text":""},{"location":"api/references/#astx.Module.block","title":"<code>block: list[AST]</code>  <code>property</code>","text":"<p>Define an alias for self.nodes.</p>"},{"location":"api/references/#astx.Module-functions","title":"Functions","text":""},{"location":"api/references/#astx.Module.__init__","title":"<code>__init__(name='main')</code>","text":"<p>Initialize the AST instance.</p>"},{"location":"api/references/#astx.Module.__str__","title":"<code>__str__()</code>","text":"<p>Return the string representation of the object.</p>"},{"location":"api/references/#astx.Module.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.Number","title":"<code>Number</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>Number data type expression.</p>"},{"location":"api/references/#astx.OperatorType","title":"<code>OperatorType</code>","text":"<p>             Bases: <code>DataType</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.Return","title":"<code>Return</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for function <code>return</code> statement.</p>"},{"location":"api/references/#astx.Return-functions","title":"Functions","text":""},{"location":"api/references/#astx.Return.__init__","title":"<code>__init__(value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Return instance.</p>"},{"location":"api/references/#astx.Return.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the object.</p>"},{"location":"api/references/#astx.Return.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.ScopeKind","title":"<code>ScopeKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Definition for different kind of scopes.</p>"},{"location":"api/references/#astx.SignedInteger","title":"<code>SignedInteger</code>","text":"<p>             Bases: <code>Integer</code></p> <p>Signed integer number data type expression.</p>"},{"location":"api/references/#astx.StatementType","title":"<code>StatementType</code>","text":"<p>             Bases: <code>AST</code></p> <p>AST main expression class.</p>"},{"location":"api/references/#astx.UnaryOp","title":"<code>UnaryOp</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>AST class for the unary operator.</p>"},{"location":"api/references/#astx.UnaryOp-functions","title":"Functions","text":""},{"location":"api/references/#astx.UnaryOp.__init__","title":"<code>__init__(op_code, operand, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the UnaryOp instance.</p>"},{"location":"api/references/#astx.UnaryOp.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.UnaryOp.get_struct","title":"<code>get_struct()</code>","text":"<p>Return the AST structure of the object.</p>"},{"location":"api/references/#astx.VarDecl","title":"<code>VarDecl</code>","text":"<p>             Bases: <code>StatementType</code></p> <p>AST class for variable declaration.</p>"},{"location":"api/references/#astx.VarDecl-functions","title":"Functions","text":""},{"location":"api/references/#astx.VarDecl.__init__","title":"<code>__init__(var_names, type_name, body, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the VarExprAST instance.</p>"},{"location":"api/references/#astx.Variable","title":"<code>Variable</code>","text":"<p>             Bases: <code>DataTypeOps</code></p> <p>AST class for the variable usage.</p>"},{"location":"api/references/#astx.Variable-functions","title":"Functions","text":""},{"location":"api/references/#astx.Variable.__init__","title":"<code>__init__(name, type_, value, loc=SourceLocation(0, 0))</code>","text":"<p>Initialize the Variable instance.</p>"},{"location":"api/references/#astx.Variable.__str__","title":"<code>__str__()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.Variable.get_struct","title":"<code>get_struct()</code>","text":"<p>Return a string that represents the object.</p>"},{"location":"api/references/#astx.VisibilityKind","title":"<code>VisibilityKind</code>","text":"<p>             Bases: <code>Enum</code></p> <p>Definition of different kind of visibility.</p>"},{"location":"api/references/#astx-functions","title":"Functions","text":""},{"location":"api/references/#astx.get_version","title":"<code>get_version()</code>","text":"<p>Return the program version.</p>"}]}