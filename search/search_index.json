{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#astx","title":"ASTx","text":"<p>OSL Python Package contains all the boilerplate you need to create a Python package.</p> <ul> <li>License: BSD 3 Clause</li> <li>Documentation: https://astx.github.io</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>The security of our code: Bandit is a powerful tool that we use in our Python   project to ensure its security. This tool analyzes the code and detects   potential vulnerabilities. Some of the key features of Bandit are its ease of   use, its ability to integrate with other tools, and its support for multiple   Python versions. If you want to know about bandit you can check its   documentation.</p> </li> <li> <p>Finds unused code: Vulture   is useful for cleaning up and finding errors in large code bases in   Python.</p> </li> <li> <p>Complexity of functions and modules: We use McCabe to identify the complexity in our Python code that may be difficult to maintain or understand. By identifying complex code at the outset, we as developers can refactor it to make it easier to maintain and understand. In summary, McCabe helps us to improve the quality of our code and make it easier to maintain. If you would like to learn more about McCabe and code complexity, you can visit McCabe - Code Complexity Checker. This tool is included with Flake8.</p> </li> <li> <p>TODO</p> </li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookieninja and the osl-incubator/scicookie project template.</p>"},{"location":"changelog/","title":"Release Notes","text":""},{"location":"changelog/#031-2023-08-22","title":"0.3.1 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes","title":"Bug Fixes","text":"<ul> <li>fix documentation release workflow (#10) (6cfb9a6)</li> </ul>"},{"location":"changelog/#030-2023-08-22","title":"0.3.0 (2023-08-22)","text":""},{"location":"changelog/#bug-fixes_1","title":"Bug Fixes","text":"<ul> <li>Fix the current linter configuration and the dependencies' pinning (#9) (d310511)</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Add support for ForRangeLoop and ForCountLoop (#7) (bb77de1)</li> </ul>"},{"location":"changelog/#021-2023-08-07","title":"0.2.1 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_2","title":"Bug Fixes","text":"<ul> <li>Refactor Control flow classes and improve Documentation (#6) (4013398)</li> </ul>"},{"location":"changelog/#020-2023-08-07","title":"0.2.0 (2023-08-07)","text":""},{"location":"changelog/#bug-fixes_3","title":"Bug Fixes","text":"<ul> <li>Fix release configuration (#5) (13cd6e1)</li> </ul>"},{"location":"changelog/#features_1","title":"Features","text":"<ul> <li>Overload DataType operators (#4) (3b93128)</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>In order to be able to contribute, it is important that you understand the project layout. This project uses the src layout, which means that the package code is located at <code>./src/astx</code>.</p> <p>For my information, check the official documentation: https://packaging.python.org/en/latest/discussions/src-layout-vs-flat-layout/</p> <p>In addition, you should know that to build our package we use Poetry, it's a Python package management tool that simplifies the process of building and publishing Python packages. It allows us to easily manage dependencies, virtual environments and package versions. Poetry also includes features such as dependency resolution, lock files and publishing to PyPI. Overall, Poetry streamlines the process of managing Python packages, making it easier for us to create and share our code with others.</p> <p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/arxlang/astx/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in     troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \u201cbug\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \u201cenhancement\u201d and \u201chelp wanted\u201d is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>ASTx could always use more documentation, whether as part of the official ASTx docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/arxlang/astx/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to     implement.</li> <li>Remember that this is a volunteer-driven project, and that     contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here\u2019s how to set up <code>astx</code> for local development.</p> <ol> <li> <p>Fork the <code>astx</code> repo on GitHub.</p> </li> <li> <p>Clone your fork locally::</p> <p>$ git clone git@github.com:your_name_here/astx.git</p> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development::</p> <p>$ mkvirtualenv astx $ cd astx/ $ python setup.py develop</p> </li> <li> <p>Create a branch for local development::</p> <p>$ git checkout -b name-of-your-bugfix-or-feature</p> <p>Now you can make your changes locally.</p> </li> <li> <p>When you\u2019re done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox::</p> <p>$ make lint $ make test</p> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub::</p> <p>$ git add . $ git commit -m \u201cYour detailed description of your changes.\u201d $ git push origin name-of-your-bugfix-or-feature</p> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python &gt;= 3.8.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<p>To run a subset of tests:: <pre><code>$ pytest tests.test_arxast\n</code></pre></p>"},{"location":"contributing/#release","title":"Release","text":"<p>This project uses semantic-release in order to cut a new release based on the commit-message.</p>"},{"location":"contributing/#commit-message-format","title":"Commit message format","text":"<p>semantic-release uses the commit messages to determine the consumer impact of changes in the codebase. Following formalized conventions for commit messages, semantic-release automatically determines the next semantic version number, generates a changelog and publishes the release.</p> <p>By default, semantic-release uses Angular Commit Message Conventions. The commit message format can be changed with the <code>preset</code> or <code>config</code> options_ of the @semantic-release/commit-analyzer and @semantic-release/release-notes-generator plugins.</p> <p>Tools such as commitizen or commitlint can be used to help contributors and enforce valid commit messages.</p> <p>The table below shows which commit message gets you which release type when <code>semantic-release</code> runs (using the default configuration):</p> Commit message Release type <code>fix(pencil): stop graphite breaking when pressure is applied</code> Fix Release <code>feat(pencil): add 'graphiteWidth' option</code> Feature Release <code>perf(pencil): remove graphiteWidth option</code> Chore <code>BREAKING CHANGE: The graphiteWidth option has been removed</code> Breaking Release <p>source: https://github.com/semantic-release/semantic-release/blob/master/README.md#commit-message-format</p> <p>As this project uses the <code>squash and merge</code> strategy, ensure to apply the commit message format to the PR's title.</p>"},{"location":"example/","title":"ASTx","text":"In\u00a0[1]: Copied! <pre>import astx\n</pre> import astx In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"example/#astx","title":"ASTx\u00b6","text":"<p>ASTx is Python library that aims to do ...</p>"},{"location":"example/#getting-started","title":"Getting Started\u00b6","text":"<p>First, check our documentation about the installation.</p> <p>Now, let's import our library:</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install ASTx, run this command in your terminal:</p> <pre><code>$ pip install astx\n</code></pre> <p>This is the preferred method to install ASTx, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for ASTx can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone https://github.com/arxlang/astx\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/arxlang/astx/tarball/main\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"api/references/","title":"Api references","text":""},{"location":"api/references/#astx","title":"<code>astx</code>","text":"<p>ASTx.</p>"},{"location":"api/references/#astx-functions","title":"Functions","text":""},{"location":"api/references/#astx.get_version","title":"<code>get_version()</code>","text":"<p>Return the program version.</p>"}]}